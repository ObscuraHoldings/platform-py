[project]
name = "platform_py"
version = "0.1.0"
description = "Hybrid Python-Rust Strategy Execution Platform"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Core async libraries
    "uvloop>=0.21.0",
    "aiohttp>=3.10.10",
    "cryptography==45.0.6",
    
    # Web3 and blockchain
    "web3>=7.6.0",
    "eth-account>=0.13.4",
    "eth-utils>=5.1.0",
    
    # FastAPI/Litestar for API
    "fastapi>=0.115.5",
    "litestar>=2.13.0",
    "uvicorn[standard]>=0.32.1",
    
    # Data validation and serialization
    "pydantic>=2.10.3",
    "pydantic-settings>=2.6.1",
    
    # ML and data processing
    "polars>=1.15.0",
    "numpy>=2.0.0",
    "pandas>=2.2.3",
    "scikit-learn>=1.5.2",
    "onnxruntime>=1.20.1",
    
    # Database and caching
    "asyncpg>=0.30.0",
    "redis[hiredis]>=5.2.0",
    "motor>=3.6.0",
    
    # Message passing and distributed computing
    "nats-py>=2.10.0",
    "ray[default]>=2.40.0",
    
    # Monitoring and logging
    "prometheus-client>=0.21.0",
    "structlog>=24.4.0",
    "rich>=13.9.4",
    
    # Testing
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
]

[build-system]
requires = ["maturin>=1.7"]
build-backend = "maturin"

[tool.maturin]
# Ensure the pure-Python package `platform_py/` is included alongside the Rust extension
python-source = "."
python-packages = ["platform_py"]

[tool.hatch.build.targets.wheel]
packages = ["platform_py"]

[tool.uv]
dev-dependencies = [
    # Development tools
    "ruff>=0.8.2",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "ipython>=8.30.0",
    "maturin>=1.7.8",
]

[tool.ruff]
line-length = 120
target-version = "py313"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
line-length = 120
target-version = ['py313']

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["platform"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]